const path = require('path');
const fs = require('fs');
const os = require('os');

class DynamicEnvManager {
  constructor() {
    this.configDir = path.join(os.homedir(), '.ccs');
    this.envFile = path.join(this.configDir, 'current-env.json');
    this.ensureConfigDir();
  }

  ensureConfigDir() {
    if (!fs.existsSync(this.configDir)) {
      fs.mkdirSync(this.configDir, { recursive: true });
    }
  }

  // 设置当前会话的环境变量（立即生效）
  setCurrentSessionVars(vars) {
    for (const [name, value] of Object.entries(vars)) {
      if (value === null || value === undefined) {
        delete process.env[name];
      } else {
        process.env[name] = value;
      }
    }
  }

  // 保存环境变量到文件，供其他进程读取
  saveEnvToFile(vars) {
    try {
      const currentEnv = this.loadEnvFromFile();
      const mergedEnv = { ...currentEnv, ...vars };
      
      // 移除null值
      Object.keys(mergedEnv).forEach(key => {
        if (mergedEnv[key] === null || mergedEnv[key] === undefined) {
          delete mergedEnv[key];
        }
      });

      fs.writeFileSync(this.envFile, JSON.stringify(mergedEnv, null, 2));
      return true;
    } catch (error) {
      console.error('Failed to save environment to file:', error.message);
      return false;
    }
  }

  // 从文件加载环境变量
  loadEnvFromFile() {
    try {
      if (fs.existsSync(this.envFile)) {
        const content = fs.readFileSync(this.envFile, 'utf8');
        return JSON.parse(content);
      }
      return {};
    } catch (error) {
      return {};
    }
  }

  // 应用保存的环境变量到当前进程
  applyEnvFromFile() {
    const savedEnv = this.loadEnvFromFile();
    this.setCurrentSessionVars(savedEnv);
    return savedEnv;
  }

  // 生成shell脚本，用于在新终端中快速应用环境变量
  generateShellScript() {
    const savedEnv = this.loadEnvFromFile();
    const scriptDir = this.configDir;
    
    // 生成bash/zsh脚本
    const bashScript = path.join(scriptDir, 'apply-env.sh');
    let bashContent = '#!/bin/bash\n# Auto-generated by ccs - Apply environment variables\n\n';
    
    for (const [name, value] of Object.entries(savedEnv)) {
      bashContent += `export ${name}="${value}"\n`;
    }
    
    bashContent += '\necho "Environment variables applied successfully!"';
    
    // 生成PowerShell脚本
    const psScript = path.join(scriptDir, 'apply-env.ps1');
    let psContent = '# Auto-generated by ccs - Apply environment variables\n\n';
    
    for (const [name, value] of Object.entries(savedEnv)) {
      psContent += `$env:${name}="${value}"\n`;
    }
    
    psContent += '\nWrite-Host "Environment variables applied successfully!" -ForegroundColor Green';

    try {
      fs.writeFileSync(bashScript, bashContent);
      fs.chmodSync(bashScript, '755');
      
      fs.writeFileSync(psScript, psContent);
      
      return { bashScript, psScript };
    } catch (error) {
      console.error('Failed to generate shell scripts:', error.message);
      return null;
    }
  }

  // 清理环境变量文件
  clearEnvFile() {
    try {
      if (fs.existsSync(this.envFile)) {
        fs.unlinkSync(this.envFile);
      }
      return true;
    } catch (error) {
      return false;
    }
  }
}

module.exports = DynamicEnvManager;